import{_ as s,o as n,c as l,a}from"./app.d8ec91c9.js";const p={},e=a(`<h1 id="lru-cache" tabindex="-1"><a class="header-anchor" href="#lru-cache" aria-hidden="true">#</a> LRU CACHE</h1><p>https://girai.dev/blog/lru-cache-implementation-in-go/</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;container/list&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;fmt&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LRUCache</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    cap </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">                   </span><span style="color:#6A9955;">// capacity</span></span>
<span class="line"><span style="color:#D4D4D4;">    l   *list.List            </span><span style="color:#6A9955;">// doubly linked list</span></span>
<span class="line"><span style="color:#D4D4D4;">    m   </span><span style="color:#569CD6;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]*list.Element </span><span style="color:#6A9955;">// hash table for checking if list node exists</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Pair is the value of a list node.</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Pair</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    key   </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">    value </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Constructor initializes a new LRUCache.</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Constructor</span><span style="color:#D4D4D4;">(capacity </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) LRUCache {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> LRUCache{</span></span>
<span class="line"><span style="color:#D4D4D4;">        cap: capacity,</span></span>
<span class="line"><span style="color:#D4D4D4;">        l:   </span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(list.List),</span></span>
<span class="line"><span style="color:#D4D4D4;">        m:   </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]*list.Element, capacity),</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Get a list node from the hash map.</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (c *LRUCache) </span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(key </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// check if list node exists</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := c.m[key]; ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> := node.Value.(*list.Element).Value.(Pair).value</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// move node to front</span></span>
<span class="line"><span style="color:#D4D4D4;">        c.l.</span><span style="color:#DCDCAA;">MoveToFront</span><span style="color:#D4D4D4;">(node)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> val</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Put key and value in the LRUCache</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (c *LRUCache) </span><span style="color:#DCDCAA;">Put</span><span style="color:#D4D4D4;">(key </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">, value </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// check if list node exists</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := c.m[key]; ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// move the node to front</span></span>
<span class="line"><span style="color:#D4D4D4;">        c.l.</span><span style="color:#DCDCAA;">MoveToFront</span><span style="color:#D4D4D4;">(node)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// update the value of a list node</span></span>
<span class="line"><span style="color:#D4D4D4;">        node.Value.(*list.Element).</span><span style="color:#9CDCFE;">Value</span><span style="color:#D4D4D4;"> = Pair{key: key, value: value}</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// delete the last list node if the list is full</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> c.l.</span><span style="color:#DCDCAA;">Len</span><span style="color:#D4D4D4;">() == c.cap {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// get the key that we want to delete</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;"> := c.l.</span><span style="color:#DCDCAA;">Back</span><span style="color:#D4D4D4;">().Value.(*list.Element).Value.(Pair).key</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// delete the node pointer in the hash map by key</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">delete</span><span style="color:#D4D4D4;">(c.m, idx)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// remove the last list node</span></span>
<span class="line"><span style="color:#D4D4D4;">            c.l.</span><span style="color:#DCDCAA;">Remove</span><span style="color:#D4D4D4;">(c.l.</span><span style="color:#DCDCAA;">Back</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// initialize a list node</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> := &amp;list.Element{</span></span>
<span class="line"><span style="color:#D4D4D4;">            Value: Pair{</span></span>
<span class="line"><span style="color:#D4D4D4;">                key:   key,</span></span>
<span class="line"><span style="color:#D4D4D4;">                value: value,</span></span>
<span class="line"><span style="color:#D4D4D4;">            },</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// push the new list node into the list</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">ptr</span><span style="color:#D4D4D4;"> := c.l.</span><span style="color:#DCDCAA;">PushFront</span><span style="color:#D4D4D4;">(node)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// save the node pointer in the hash map</span></span>
<span class="line"><span style="color:#D4D4D4;">        c.m[key] = ptr</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">Constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)   </span><span style="color:#6A9955;">// nil</span></span>
<span class="line"><span style="color:#D4D4D4;">    obj.</span><span style="color:#DCDCAA;">Put</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">)          </span><span style="color:#6A9955;">// nil, linked list: [1:10]</span></span>
<span class="line"><span style="color:#D4D4D4;">    obj.</span><span style="color:#DCDCAA;">Put</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">)          </span><span style="color:#6A9955;">// nil, linked list: [2:20, 1:10]</span></span>
<span class="line"><span style="color:#D4D4D4;">    fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(obj.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)) </span><span style="color:#6A9955;">// 10, linked list: [1:10, 2:20]</span></span>
<span class="line"><span style="color:#D4D4D4;">    obj.</span><span style="color:#DCDCAA;">Put</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">)          </span><span style="color:#6A9955;">// nil, linked list: [3:30, 1:10]</span></span>
<span class="line"><span style="color:#D4D4D4;">    fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(obj.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)) </span><span style="color:#6A9955;">// -1, linked list: [3:30, 1:10]</span></span>
<span class="line"><span style="color:#D4D4D4;">    obj.</span><span style="color:#DCDCAA;">Put</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">40</span><span style="color:#D4D4D4;">)          </span><span style="color:#6A9955;">// nil, linked list: [4:40, 3:30]</span></span>
<span class="line"><span style="color:#D4D4D4;">    fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(obj.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)) </span><span style="color:#6A9955;">// -1, linked list: [4:40, 3:30]</span></span>
<span class="line"><span style="color:#D4D4D4;">    fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(obj.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)) </span><span style="color:#6A9955;">// 30, linked list: [3:30, 4:40]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),o=[e];function D(c,i){return n(),l("div",null,o)}var r=s(p,[["render",D],["__file","lru.html.vue"]]);export{r as default};

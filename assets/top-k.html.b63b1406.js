import{_ as s,o as n,c as l,a}from"./app.62dc178f.js";const p={},e=a(`<h1 id="top-k-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#top-k-\u7B97\u6CD5" aria-hidden="true">#</a> Top-K \u7B97\u6CD5</h1><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">slideInterval</span><span style="color:#D4D4D4;"> = time.Second * </span><span style="color:#B5CEA8;">15</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">slideWindow</span><span style="color:#D4D4D4;">   = time.Minute * </span><span style="color:#B5CEA8;">5</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">slotNum</span><span style="color:#D4D4D4;">       = slideWindow / slideInterval</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">topK</span><span style="color:#D4D4D4;">          = </span><span style="color:#B5CEA8;">10</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ClientCounters</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">       counters [slotNum]</span><span style="color:#569CD6;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">]</span><span style="color:#4EC9B0;">uint</span></span>
<span class="line"><span style="color:#D4D4D4;">       ch       </span><span style="color:#569CD6;">chan</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ClientTuple</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">       name </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">       val  </span><span style="color:#4EC9B0;">uint</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">NewClientCounters</span><span style="color:#D4D4D4;">() *ClientCounters {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> := &amp;ClientCounters{</span></span>
<span class="line"><span style="color:#D4D4D4;">               ch: </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">chan</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> result.counters {</span></span>
<span class="line"><span style="color:#D4D4D4;">               result.counters[i] = </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">]</span><span style="color:#4EC9B0;">uint</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> result</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (c *ClientCounters) </span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(client </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">       c.ch &lt;- client</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (c *ClientCounters) </span><span style="color:#DCDCAA;">generateMetrics</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">]</span><span style="color:#4EC9B0;">uint</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">counter</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> c.counters {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">client</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> counter {</span></span>
<span class="line"><span style="color:#D4D4D4;">                       </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := m[client]; !ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">                               m[client] = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">                       }</span></span>
<span class="line"><span style="color:#D4D4D4;">                       m[client] = val</span></span>
<span class="line"><span style="color:#D4D4D4;">               }</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">([]*ClientTuple, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(m))</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> m {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#9CDCFE;">tuple</span><span style="color:#D4D4D4;"> := &amp;ClientTuple{</span></span>
<span class="line"><span style="color:#D4D4D4;">                       name: name,</span></span>
<span class="line"><span style="color:#D4D4D4;">                       val:  val,</span></span>
<span class="line"><span style="color:#D4D4D4;">               }</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">append</span><span style="color:#D4D4D4;">(result, tuple)</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">       sort.</span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">(result, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(i, j </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> result[i].val &gt; result[j].val</span></span>
<span class="line"><span style="color:#D4D4D4;">       })</span></span>
<span class="line"><span style="color:#D4D4D4;">       ClientCount.</span><span style="color:#DCDCAA;">Reset</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">([]*ClientTuple, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(m))</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> m {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#9CDCFE;">tuple</span><span style="color:#D4D4D4;"> := &amp;ClientTuple{</span></span>
<span class="line"><span style="color:#D4D4D4;">                       name: name,</span></span>
<span class="line"><span style="color:#D4D4D4;">                       val:  val,</span></span>
<span class="line"><span style="color:#D4D4D4;">               }</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">append</span><span style="color:#D4D4D4;">(result, tuple)</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">       sort.</span><span style="color:#DCDCAA;">Slice</span><span style="color:#D4D4D4;">(result, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(i, j </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> result[i].val &gt; result[j].val</span></span>
<span class="line"><span style="color:#D4D4D4;">       })</span></span>
<span class="line"><span style="color:#D4D4D4;">       ClientCount.</span><span style="color:#DCDCAA;">Reset</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;"> := topK</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> end &gt; </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(result) {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(result)</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> result[:end] {</span></span>
<span class="line"><span style="color:#D4D4D4;">               ClientCount.</span><span style="color:#DCDCAA;">WithLabelValues</span><span style="color:#D4D4D4;">(t.name).</span><span style="color:#DCDCAA;">Set</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">float64</span><span style="color:#D4D4D4;">(t.val))</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (c *ClientCounters) </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> := </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">tick</span><span style="color:#D4D4D4;"> := time.</span><span style="color:#DCDCAA;">Tick</span><span style="color:#D4D4D4;">(slideInterval)</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#C586C0;">select</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> &lt;-tick:</span></span>
<span class="line"><span style="color:#D4D4D4;">                       c.</span><span style="color:#DCDCAA;">generateMetrics</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">                       </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> = (index  </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) % </span><span style="color:#DCDCAA;">int</span><span style="color:#D4D4D4;">(slotNum)</span></span>
<span class="line"><span style="color:#D4D4D4;">                       c.counters[index] = </span><span style="color:#DCDCAA;">make</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">]</span><span style="color:#4EC9B0;">uint</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">               </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">client</span><span style="color:#D4D4D4;"> := &lt;-c.ch:</span></span>
<span class="line"><span style="color:#D4D4D4;">                       </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := c.counters[index][client]; !ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">                               c.counters[index][client] = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">                       }</span></span>
<span class="line"><span style="color:#D4D4D4;">                       c.counters[index][client]</span></span>
<span class="line"><span style="color:#D4D4D4;">               }</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">clientCounters</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">NewClientCounters</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">go</span><span style="color:#D4D4D4;"> clientCounters.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">ip</span><span style="color:#D4D4D4;"> := </span><span style="color:#CE9178;">&quot;127.0.0.1&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> clientCounters != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	 clientCounters.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(ip)</span></span>
<span class="line"><span style="color:#D4D4D4;">       }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[e];function D(c,r){return n(),l("div",null,o)}var t=s(p,[["render",D],["__file","top-k.html.vue"]]);export{t as default};
